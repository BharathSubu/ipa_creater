// Generated by view binder compiler. Do not edit!
package com.shadow.blackhole.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.ViewFlipper;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.shadow.blackhole.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class BlackHoleMusicWidgetBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView widgetAlbumArt;

  @NonNull
  public final LinearLayout widgetButtonContainer;

  @NonNull
  public final ImageButton widgetButtonNext;

  @NonNull
  public final ImageButton widgetButtonPlayPause;

  @NonNull
  public final ImageButton widgetButtonPrev;

  @NonNull
  public final LinearLayout widgetContainer;

  @NonNull
  public final LinearLayout widgetDisplayContainer;

  @NonNull
  public final TextView widgetSubtitleText;

  @NonNull
  public final LinearLayout widgetTextContainer;

  @NonNull
  public final TextView widgetTitleText;

  @NonNull
  public final ViewFlipper widgetViewFlipper;

  private BlackHoleMusicWidgetBinding(@NonNull LinearLayout rootView,
      @NonNull ImageView widgetAlbumArt, @NonNull LinearLayout widgetButtonContainer,
      @NonNull ImageButton widgetButtonNext, @NonNull ImageButton widgetButtonPlayPause,
      @NonNull ImageButton widgetButtonPrev, @NonNull LinearLayout widgetContainer,
      @NonNull LinearLayout widgetDisplayContainer, @NonNull TextView widgetSubtitleText,
      @NonNull LinearLayout widgetTextContainer, @NonNull TextView widgetTitleText,
      @NonNull ViewFlipper widgetViewFlipper) {
    this.rootView = rootView;
    this.widgetAlbumArt = widgetAlbumArt;
    this.widgetButtonContainer = widgetButtonContainer;
    this.widgetButtonNext = widgetButtonNext;
    this.widgetButtonPlayPause = widgetButtonPlayPause;
    this.widgetButtonPrev = widgetButtonPrev;
    this.widgetContainer = widgetContainer;
    this.widgetDisplayContainer = widgetDisplayContainer;
    this.widgetSubtitleText = widgetSubtitleText;
    this.widgetTextContainer = widgetTextContainer;
    this.widgetTitleText = widgetTitleText;
    this.widgetViewFlipper = widgetViewFlipper;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static BlackHoleMusicWidgetBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BlackHoleMusicWidgetBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.black_hole_music_widget, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BlackHoleMusicWidgetBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.widget_album_art;
      ImageView widgetAlbumArt = ViewBindings.findChildViewById(rootView, id);
      if (widgetAlbumArt == null) {
        break missingId;
      }

      id = R.id.widget_button_container;
      LinearLayout widgetButtonContainer = ViewBindings.findChildViewById(rootView, id);
      if (widgetButtonContainer == null) {
        break missingId;
      }

      id = R.id.widget_button_next;
      ImageButton widgetButtonNext = ViewBindings.findChildViewById(rootView, id);
      if (widgetButtonNext == null) {
        break missingId;
      }

      id = R.id.widget_button_play_pause;
      ImageButton widgetButtonPlayPause = ViewBindings.findChildViewById(rootView, id);
      if (widgetButtonPlayPause == null) {
        break missingId;
      }

      id = R.id.widget_button_prev;
      ImageButton widgetButtonPrev = ViewBindings.findChildViewById(rootView, id);
      if (widgetButtonPrev == null) {
        break missingId;
      }

      LinearLayout widgetContainer = (LinearLayout) rootView;

      id = R.id.widget_display_container;
      LinearLayout widgetDisplayContainer = ViewBindings.findChildViewById(rootView, id);
      if (widgetDisplayContainer == null) {
        break missingId;
      }

      id = R.id.widget_subtitle_text;
      TextView widgetSubtitleText = ViewBindings.findChildViewById(rootView, id);
      if (widgetSubtitleText == null) {
        break missingId;
      }

      id = R.id.widget_text_container;
      LinearLayout widgetTextContainer = ViewBindings.findChildViewById(rootView, id);
      if (widgetTextContainer == null) {
        break missingId;
      }

      id = R.id.widget_title_text;
      TextView widgetTitleText = ViewBindings.findChildViewById(rootView, id);
      if (widgetTitleText == null) {
        break missingId;
      }

      id = R.id.widget_view_flipper;
      ViewFlipper widgetViewFlipper = ViewBindings.findChildViewById(rootView, id);
      if (widgetViewFlipper == null) {
        break missingId;
      }

      return new BlackHoleMusicWidgetBinding((LinearLayout) rootView, widgetAlbumArt,
          widgetButtonContainer, widgetButtonNext, widgetButtonPlayPause, widgetButtonPrev,
          widgetContainer, widgetDisplayContainer, widgetSubtitleText, widgetTextContainer,
          widgetTitleText, widgetViewFlipper);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
